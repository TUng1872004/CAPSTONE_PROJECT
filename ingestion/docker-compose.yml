services:

  etcd:
    container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.18
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - ./${LOCAL_DATA}/etcd:/etcd
    command: etcd -advertise-client-urls=http://etcd:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd --max-request-bytes=10485760
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3
  
  standalone:
    container_name: milvus-standalone
    image: milvusdb/milvus:v2.6.3
    command: ["milvus", "run", "standalone"]
    security_opt:
    - seccomp:unconfined
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
      MQ_TYPE: woodpecker
    volumes:
      - ./${LOCAL_DATA}/milvus:/var/lib/milvus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3
    ports:
      - "19530:19530"
      - "9091:9091"
    depends_on:
      - "etcd"
      - "minio"

  postgres:
      image: postgres:14
      environment:
        POSTGRES_USER: prefect
        POSTGRES_PASSWORD: prefect
        POSTGRES_DB: prefect
      volumes:
        - ./${LOCAL_DATA}/postgres:/var/lib/postgresql/data
      healthcheck:
        test: ["CMD-SHELL", "pg_isready -U prefect"]
        interval: 5s
        timeout: 5s
        retries: 5
      ports:
      - "5432:5432"
  redis:
    image: redis:7
    volumes:
      - ./${LOCAL_DATA}/redis:/data
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping"]
      interval: 5s
      timeout: 5s
      retries: 5
  
  prefect-server:
    image: prefecthq/prefect:3-latest
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      PREFECT_API_DATABASE_CONNECTION_URL: postgresql+asyncpg://prefect:prefect@postgres:5432/prefect
      PREFECT_SERVER_API_HOST: 0.0.0.0
      PREFECT_MESSAGING_BROKER: prefect_redis.messaging
      PREFECT_MESSAGING_CACHE: prefect_redis.messaging
      PREFECT_REDIS_MESSAGING_HOST: redis
      PREFECT_REDIS_MESSAGING_PORT: 6379
      PREFECT_REDIS_MESSAGING_DB: 0
    command: prefect server start --no-services
    ports:
      - "4200:4200"

  
  prefect-services:
    image: prefecthq/prefect:3-latest
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      PREFECT_API_DATABASE_CONNECTION_URL: postgresql+asyncpg://prefect:prefect@postgres:5432/prefect
      PREFECT_MESSAGING_BROKER: prefect_redis.messaging
      PREFECT_MESSAGING_CACHE: prefect_redis.messaging
      PREFECT_REDIS_MESSAGING_HOST: redis
      PREFECT_REDIS_MESSAGING_PORT: 6379
      PREFECT_REDIS_MESSAGING_DB: 0
    command: prefect server services start

  
  prefect-worker:
    image: prefecthq/prefect:3-latest
    depends_on:
      prefect-server:
        condition: service_started
    environment:
      PREFECT_API_URL: http://prefect-server:4200/api
    command: prefect worker start --pool local-pool
  

  consul:
      image: hashicorp/consul:latest
      command: "agent -server -bootstrap-expect=1 -client=0.0.0.0 -ui -data-dir=/consul/data"
      ports:
        - "8500:8500"
      volumes:
        - ./${LOCAL_DATA}/consul:/consul/data

  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "${MINIO_API_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    volumes:
      - ./${LOCAL_DATA}/minio:/data
    environment:
      MINIO_ROOT_USER: "${MINIO_ROOT_USER:-minioadmin}"
      MINIO_ROOT_PASSWORD: "${MINIO_ROOT_PASSWORD:-minioadmin}"
      MINIO_IP_ADDRESS: "${MINIO_IP_ADDRESS:-localhost}"
    command: minio server /data --console-address ":9001"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://minio:9000/minio/health/live || exit 1"]
      interval: 30s
      timeout: 20s
      retries: 3

  autoshot:
    build:
      context: ./${AUTOSHOT_CONTEXT}
      dockerfile: Dockerfile
    container_name: autoshot
    gpus: all
    env_file:
      - ./${AUTOSHOT_CONTEXT}/.env
    environment:
      MINIO_PUBLIC_ENDPOINT: ${MINIO_PUBLIC_ENDPOINT:-localhost:9000}
      MINIO_INTERNAL_ENDPOINT: ${MINIO_INTERNAL_ENDPOINT:-minio:9000}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-minioadmin}
      NVIDIA_VISIBLE_DEVICES: "all"
      NVIDIA_DRIVER_CAPABILITIES: "compute,utility"
    volumes:
      - ./prefect_agent/service_autoshot:/app/service_autoshot
      - ./prefect_agent/shared:/app/shared
      - ./prefect_agent/weight:/app/weight
    ports:
      - "8001:8001"
    depends_on:
      - minio
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8001/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: no


  asr:
    build:
      context: ./${ASR_CONTEXT}
      dockerfile: Dockerfile
    container_name: asr
    gpus: all
    env_file:
      - ./${ASR_CONTEXT}/.env
    environment:
      MINIO_PUBLIC_ENDPOINT: ${MINIO_PUBLIC_ENDPOINT:-localhost:9000}
      MINIO_INTERNAL_ENDPOINT: ${MINIO_INTERNAL_ENDPOINT:-minio:9000}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-minioadmin}
      NVIDIA_VISIBLE_DEVICES: "all"
      NVIDIA_DRIVER_CAPABILITIES: "compute,utility"
    volumes:
      - ./prefect_agent/service_asr:/app/service_asr
      - ./prefect_agent/shared:/app/shared
      - ./prefect_agent/weight:/app/weight
    ports: 
      - "8002:8002"
    depends_on:
      - minio
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8002/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: no


  ie: # image_embedding
    build:
      context: ./${IMAGE_EMBEDDING_CONTEXT}
      dockerfile: Dockerfile
    container_name: ie
    gpus: all
    env_file:
      - ./${IMAGE_EMBEDDING_CONTEXT}/.env
    environment:
      MINIO_PUBLIC_ENDPOINT: ${MINIO_PUBLIC_ENDPOINT:-localhost:9000}
      MINIO_INTERNAL_ENDPOINT: ${MINIO_INTERNAL_ENDPOINT:-minio:9000}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-minioadmin}
      NVIDIA_VISIBLE_DEVICES: "all"
      NVIDIA_DRIVER_CAPABILITIES: "compute,utility"
    volumes:
      - ./prefect_agent/service_image_embedding:/app/service_image_embedding
      - ./prefect_agent/shared:/app/shared
      - ./prefect_agent/weight:/app/weight
    ports: 
      - "8003:8003"
    depends_on:
      - minio
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8003/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: no

  llm: 
    build:
      context: ./${LLM_CONTEXT}
      dockerfile: Dockerfile
    container_name: llm
    gpus: all
    env_file:
      - ./${LLM_CONTEXT}/.env
    environment:
      MINIO_PUBLIC_ENDPOINT: ${MINIO_PUBLIC_ENDPOINT:-localhost:9000}
      MINIO_INTERNAL_ENDPOINT: ${MINIO_INTERNAL_ENDPOINT:-minio:9000}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-minioadmin}
      NVIDIA_VISIBLE_DEVICES: "all"
      NVIDIA_DRIVER_CAPABILITIES: "compute,utility"
    volumes:
      - ./prefect_agent/service_llm:/app/service_llm
      - ./prefect_agent/shared:/app/shared
      - ./prefect_agent/weight:/app/weight
    ports: 
      - "8004:8004"
    depends_on:
      - minio
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8004/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: no
  
  te:
    build:
      context: ./${TEXT_EMBEDDING_CONTEXT}
      dockerfile: Dockerfile
    container_name: te
    gpus: all
    env_file:
      - ./${TEXT_EMBEDDING_CONTEXT}/.env
    environment:
      MINIO_PUBLIC_ENDPOINT: ${MINIO_PUBLIC_ENDPOINT:-localhost:9000}
      MINIO_INTERNAL_ENDPOINT: ${MINIO_INTERNAL_ENDPOINT:-minio:9000}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-minioadmin}
      NVIDIA_VISIBLE_DEVICES: "all"
      NVIDIA_DRIVER_CAPABILITIES: "compute,utility"
    volumes:
      - ./prefect_agent/service_text_embedding:/app/service_text_embedding
      - ./prefect_agent/shared:/app/shared
      - ./prefect_agent/weight:/app/weight
    ports: 
      - "8005:8005"
    depends_on:
      - minio
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8005/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: no    

  ingestion-api:
    build:
      context: ./
      dockerfile: Dockerfile
    container_name: ingestion-api
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_started
      consul:
        condition: service_started
    environment:
      MINIO_HOST: minio
      MINIO_PORT: "9000"
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-minioadmin}
      MINIO_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
      POSTGRE_DATABASE_URL: postgresql+asyncpg://prefect:prefect@postgres:5432/prefect
      CONSUL_HOST: consul
      CONSUL_PORT: "8500"
      PREFECT_API_URL: http://prefect-server:4200/api

    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8000/pipeline_check || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

    volumes:
      - ./api:/app/api
      - ./core:/app/core
      - ./flow:/app/flow
      - ./task:/app/task
      - ./main.py:/app/main.py
      - ./prefect_agent/shared:/app/prefect_agent/shared
      - ./prefect_agent/service_asr:/app/prefect_agent/service_asr
      - ./prefect_agent/service_autoshot:/app/prefect_agent/service_autoshot
      - ./prefect_agent/service_llm:/app/prefect_agent/service_llm
      - ./prefect_agent/service_image_embedding:/app/prefect_agent/service_image_embedding
      - ./prefect_agent/service_text_embedding:/app/prefect_agent/service_text_embedding



networks:
  default:
    name: video-pipeline
    external: false
  
